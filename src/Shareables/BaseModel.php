<?php
/**
 * Created by IntelliJ IDEA.
 * User: Rubens
 * Date: 2017-01-22
 * Time: 9:35 AM
 */

namespace CST21\Shareables;


use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;

/**
 * Class BaseModel
 * @package App\Model
 * @property int $id
 * @property Carbon $created_at
 * @property Carbon $updated_at
 * @mixin Builder
 * @method static $this find($id, $columns = ['*'])
 * @method static $this findOrFail($id, $columns = ['*'])
 * @method static $this first($columns = ['*'])
 * @method static $this|$this[] get($columns = ['*'])
 * @method static $this|$this[] where($column, $operator = null, $value = null, $boolean = 'and')
 * @method static $this|$this[] orWhere($column, $operator = null, $value = null)
 * @method static $this|$this[] with($relations)
 * @method static $this getQuery()
 */
abstract class BaseModel extends Model
{
    protected static $__relationships = [];
    protected static $__attSet = [];
    protected static $__attGet = [];

    /**
     * The attributes that should be mutated to dates.
     *
     * @var array
     */
    protected $dates = ['created_at', 'updated_at'];



	/**
     * @inheritdoc
     */
    public function newFromBuilder($attributes = [], $connection = null)
    {
        /** @var BaseModel $obj */
        $obj = parent::newFromBuilder($attributes, $connection);
        return $obj->internalConstruct();
    }

    /**
     * Overwrite this method in your model if you want to run something after Eloquent has created a new object
     *
     * @return $this
     */
    protected function internalConstruct()
    {
        return $this;
    }

    /**
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return Carbon
     */
    public function getCreatedAt(): Carbon
    {
        return $this->created_at;
    }

    /**
     * @return Carbon
     */
    public function getUpdatedAt(): Carbon
    {
        return $this->updated_at;
    }

    //region Methods to improve development speed

    /**
     * It handle the methods "magic" to identify get/set
     *
     * @param string $method
     * @param array $parameters
     * @return mixed
     */
    public function __call($method, $parameters)
    {
        echo "\nCahmou $method\n";
		if(isset(static::$__attSet[$method])) {
			$this->{static::$__attSet[$method]} = $parameters[0];
			return $this;
		} elseif(isset(static::$__attGet[$method])) {
            return $this->{static::$__attGet[$method]};
		} elseif(isset(static::$__relationships[$method])) {
            $data = static::$__relationships[$method];
			switch ($data['rel']) {
                case 'belongsTo':
                    return $this->{$data['rel']}($data['model'], $data['local_col'], $data['foreign_col']);
                    break;
                default:
                    throw new \Exception('Invalid relationship setted');
            }
		} else {
            return parent::__call($method, $parameters);
        }
    }

    public function __get($key)
	{
		if(isset(static::$__relationships[$key])) {
			$data = static::$__relationships[$key];
            switch ($data['rel']) {
                case 'belongsTo':
                    return $this->{$data['rel']}($data['model'], $data['local_col'], $data['foreign_col'])->first();
                    break;
                default:
                    throw new \Exception('Invalid relationship setted');
            }

		}
		return parent::__get($key); // TODO: Change the autogenerated stub
	}
    public function __set($key, $value)
	{
		if(isset(static::$__relationships[$key])) {
            $data = static::$__relationships[$key];
			switch ($data['rel']) {
                case 'belongsTo':
                    return $this->{$key}()->associate($value);
                    break;
                default:
                    throw new \Exception('Invalid relationship setted');
            }
		}
		parent::__set($key, $value); // TODO: Change the autogenerated stub
	}


    //endregion
}